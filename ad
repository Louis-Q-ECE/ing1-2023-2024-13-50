#include "sousp.h"
#include <stdio.h>
#include <windows.h>
#include <unistd.h>
#include <pthread.h>
#include <conio.h>

void EffacerEcran() {
    system("cls");  // Pour Windows
}

//Déclaration des variables
int option;
int mdp0;
int temps;
int scoretotal;
int score1, score2, score3;
int t1 = 5, t2 = 6, t3 = 7;
char mot ;


//initialisation des variables mdp1, mdp2, mdp3 qui respectivement ont la valeur
int mdp1 = 1;
int mdp2 = 2;
int mdp3 = 3;

struct TimerData {
    int temps;
};

// Fonction de thread pour gérer le timer
void *timerThread(void *arg) {
    struct TimerData *timerData = (struct TimerData *)arg;

    while ((*timerData).temps > 0) {
        sleep(1);
        printf("\rTemps restant : %d secondes", (*timerData).temps);
        fflush(stdout);
        (*timerData).temps--;
    }
    printf("\nLe compte à rebours est terminé !\n");

    pthread_exit(NULL);
}


void nv1() {
    SetConsoleOutputCP(65001);
    int tab[12][22];
    char character = 'S';
    int x = 10, y = 5;
    int vie = 3;  // Nombre initial de vies

    // Initialisation du plateau
    for (int a = 0; a < 12; a++) {
        for (int b = 0; b < 22; b++) {
            if (a == 0 || a == 11) {
                tab[a][b] = 1;  // les bordures du toit et du plancher
            } else if (b == 0 || b == 21) {
                tab[a][b] = 2; // les bordures des murs
            } else if (a == 1 && b == 1 || a == 10 && b == 1 || a == 1 && b == 20 || a == 10 && b == 20) { // oiseaux
                tab[a][b] = 3;
            } else if (a == 2 && b == 4 || a == 2 && b == 5 || a == 2 && b == 6 || a == 2 && b == 6) { // bloc poussable
                tab[a][b] = 4;
            } else if (a == 6 && b == 11 || a == 7 && b == 11 || a == 8 && b == 11 || a == 8 && b == 11) { // bloc cassable
                tab[a][b] = 5;
            } else if (a == 8 && b == 12 || a == 9 && b == 12 || a == 5 && b == 4 || a == 5 && b == 5) { // bloc piégé
                tab[a][b] = 6;
            } else {
                tab[a][b] = 0;  // l'intérieur
            }
        }
    }
    while (vie > 0) {
        // Initialisation des données pour le thread du timer
        struct TimerData timerData;
        timerData.temps = 120;

        // Création du thread du timer
        pthread_t timerThreadId;
        if (pthread_create(&timerThreadId, NULL, timerThread, (void *) &timerData) != 0) {
            fprintf(stderr, "Erreur lors de la création du thread du timer.\n");
        }

        // Boucle principale
        while (timerData.temps > 0) {
            EffacerEcran();  // Efface l'écran


            // Affichage du plateau avec le personnage
            printf("Plateau du niveau :\n");
            for (int a = 0; a < 12; a++) {
                for (int b = 0; b < 22; b++) {
                    if (a == y && b == x) {
                        printf("%c", character);
                    } else {
                        if (tab[a][b] == 1) {
                            printf("-");
                        } else if (tab[a][b] == 2) {
                            printf("|");
                        } else if (tab[a][b] == 3) {
                            printf("A");
                        } else if (tab[a][b] == 4) {
                            printf("#");
                        } else if (tab[a][b] == 5) {
                            printf("0");
                        } else if (tab[a][b] == 6) {
                            printf("&");
                        } else {
                            printf(" ");
                        }
                    }
                }
                printf("\n");
            }

            // Code pour déplacer le personnage
            char key = getch();
            if (key == 'z' && y > 1) {
                if (tab[y - 1][x] == 3 || tab[y - 1][x] == 5) {
                    tab[y - 1][x] = 0; // Fait disparaître le "A" et le bloc cassable
                    if (tab[x][y] == 0) {
                        printf(" ");
                    }
                } else if (tab[y - 1][x] == 4) {
                    tab[y - 1][x] = 0; // Fait disparaître le bloc "#"
                    tab[y - 2][x] = 4; // Déplace le bloc "#" une case avant dans la direction du déplacement
                    if (tab[x][y] == 0) {
                        printf(" ");
                    } else if (tab[x][y] == 4) {
                        printf("#");
                    }
                }
                y--;
            } else if (key == 's' && y < 10) {
                if (tab[y + 1][x] == 3 || tab[y + 1][x] == 5) {
                    tab[y + 1][x] = 0; // Fait disparaître le "A" et le bloc cassable
                    if (tab[x][y] == 0) {
                        printf(" ");
                    }
                } else if (tab[y + 1][x] == 4) {
                    tab[y + 1][x] = 0; // Fait disparaître le bloc "#"
                    tab[y + 2][x] = 4; // Déplace le bloc "#" une case après dans la direction du déplacement
                    if (tab[x][y] == 0) {
                        printf(" ");
                    } else if (tab[x][y] == 4) {
                        printf("#");
                    }
                }
                y++;
            } else if (key == 'q' && x > 1) {
                if (tab[y][x - 1] == 3 || tab[y][x - 1] == 5) {
                    tab[y][x - 1] = 0; // Fait disparaître le "A" et le bloc cassable
                    if (tab[x][y - 1] == 0) {
                        printf(" ");
                    }
                } else if (tab[y][x - 1] == 4) {
                    tab[y][x - 1] = 0; // Fait disparaître le bloc "#"
                    tab[y][x - 2] = 4; // Déplace le bloc "#" une case avant dans la direction du déplacement
                    if (tab[x][y] == 0) {
                        printf(" ");
                    } else if (tab[x][y] == 4) {
                        printf("#");
                    }
                }
                x--;
            } else if (key == 'd' && x < 20) {
                if (tab[y][x + 1] == 3 || tab[y][x + 1] == 5) {
                    tab[y][x + 1] = 0; // Fait disparaître le "A" et le bloc cassable
                    if (tab[x][y] == 0) {
                        printf(" ");
                    }
                } else if (tab[y][x + 1] == 4) {
                    tab[y][x + 1] = 0; // Fait disparaître le bloc "#"
                    tab[y][x + 2] = 4; // Déplace le bloc "#" une case après dans la direction du déplacement
                    if (tab[x][y] == 0) {
                        printf(" ");
                    } else if (tab[x][y] == 4) {
                        printf("#");
                    }
                }
                x++;
            }
        }
        pthread_join(timerThreadId, NULL);

        // Décrémente le nombre de vies si le temps est écoulé ou si le personnage touche un bloc piégé
        if (timerData.temps <= 0 || tab[y][x] == 6) {
            vie--;
            printf("\nVous avez perdu une vie ! Vies restantes : %d\n", vie);
            sleep(2);  // Attendez quelques secondes avant de reprendre
            break;
        }
    }
}
void regles(){
    printf("-Initialement, le joueur possede 3 vies. \n\n");
    printf("-Chaque niveau devra etre resolu en moins de 120 secondes. Si le temps est ecoule, le joueur perd une \n"
           "vie et recommence le niveau. Le but est de recuperer les 4 oiseaux du niveau sans se faire toucher par \n"
           "un obstacle \n\n");
}

void mdp(){
    printf("Entrer un mot de passe\n");
    scanf("%d", &mdp0);
    if (mdp0 == mdp1) {
        printf("-vous allez jouer au niveau 1. \n\n");
    } else if (mdp0 == mdp2) {
        printf("-vous allez jouer au niveau 2 \n\n");
    } else if (mdp0 == mdp3) {
        printf("-vous allez jouer au niveau 3. \n\n");
    } else {
        printf("-votre mot de passe est incorect. \n\n");
    }
}

void score(){
    // on affiche le score totale du joueur de cette maniere Sniveau = temps restant * 100
    score1 = t1 * 100;
    score2 = t2 * 100;
    score3 = t3 * 100;

    //Au fur et à mesure des niveaux, les scores s'additionnent pour former le score final.
    scoretotal = score1 + score2 + score3;
    scanf("%d", &scoretotal);
    printf("Votre score est : %d.\n", scoretotal);
    sleep(15);
}

void quitter(){
    printf("Vous avez decide de quitter le jeu, on vous attend pour une nouvelle aventure.\n");
    exit(0);
}
void menu(){


    //nous affichons le menu disponible pour le joueur.
    do {
        printf("Menu principal : \n\n");
        printf("1)Regles du jeu\n");
        printf("2)Lancer un nouveau Jeu a partir du niveau 1\n");
        printf("3)Charger une partie\n");
        printf("4)Mot de passe\n");
        printf("5)Scores\n");
        printf("6)Quitter\n\n");
        printf("choisisssez une option entre 1 et 6.\n");
        scanf("%d", &option);
        system("cls");    }
    while (option != 1 && option != 2 && option != 3 && option != 4 && option != 5 && option != 6);


    //si le joueur appuie sur 1 alors les règles du jeu apparaissent.
    if (option == 1) {
        regles();
        printf("voulez vous retourner dans le menu ? oui/non\n");
        mot = getch();
        do {
        if (mot == 'oui') {
            do {
                system("cls");
                printf("Menu principal : \n\n");
                printf("1)Lancer un nouveau Jeu a partir du niveau 1\n");
                printf("2)Charger une partie\n");
                printf("3)Mot de passe\n");
                printf("4)Scores\n");
                printf("5)Quitter\n\n");
                printf("choisisssez une option entre 1 et 5.\n");
                scanf("%d", &option);
                system("cls");
            } while (option != 1 && option != 2 && option != 3 && option != 4 && option != 5);
        }       while (mot!="oui")

            if (option == 1){
                printf("Vous allez lancer un nouveau jeu a partir du niveau 1.\n");
                nv1();
            }
            else if (option == 2){
                printf("Vous allez charger votre partie dernierement sauvegardee.\n");
            }
            else if (option == 3){
                mdp();
            }
            else if (option == 4){
                score();
            }
        }else{
            EffacerEcran();
            regles();
        }

    }

        //si le joueur appuie sur 2 alors il relancera un nouveau jeu donc une nouvelle partie qu'il devra ensuite sauvegardee
    else if (option == 2) {
        printf("Vous allez lancer un nouveau jeu a partir du niveau 1.\n");
        nv1();
    }

        //si le joueur appuie sur 3 alors il chargera sa partie qui a été sauvegardee
    else if (option == 3) {
        printf("Vous allez charger votre partie dernierement sauvegardee.\n");
    }

        // si le joeur appuie sur 4 il devra entrer un mot de passe, selon le mot de passe, il sera renvoyer vers le niveau 1,2 ou 3
    else if (option == 4) {
        mdp();

    } else if (option == 5) {
        score();
    }

        // si le joueur appuie sur 6 il quittera le jeu.
    else if (option == 6) {
        quitter();
    }
}
void snoopy(){
    int ChoixBip = 2;
    int i;
    char MonAscii[16][1000];
    strcpy(MonAscii[0], "         _\n");
    strcpy(MonAscii[1], "        (:)_\n");
    strcpy(MonAscii[2], "      ,'    `.\n");
    strcpy(MonAscii[3], "     :        :\n");
    strcpy(MonAscii[4], "     |        |              ___\n");
    strcpy(MonAscii[5], "     |       /|    ______   // _\\\n");
    strcpy(MonAscii[6], "     ; -  _,' :  ,'      `. \\\\  -\\\n");
    strcpy(MonAscii[7], "    /          \\/          \\ \\\\  :\n");
    strcpy(MonAscii[8], "   (            :  ------.  `-'  |\n");
    strcpy(MonAscii[9], "____\\___    ____|______   \\______|_______\n");
    strcpy(MonAscii[10], "        |::|           '--`\n");
    strcpy(MonAscii[11], "        |::|\n");
    strcpy(MonAscii[12], "        |::|\n");
    strcpy(MonAscii[13], "        |::|\n");
    strcpy(MonAscii[14], "        |::;\n");
    strcpy(MonAscii[15], "        `:/\n");


    do {

        printf("Voulez-vous du son ? \n");
        printf("\n0 = muet    1 = son active \n");
        scanf("%d", &ChoixBip);
        EffacerEcran();

    } while (ChoixBip != 0 && ChoixBip != 1);


    for (i = 5; i < 21; i++) {
        usleep(200000); //obligé d'utiliser usleep car sleep pas assez précis
        if (ChoixBip == 1) {
            Beep(i * 100, 200);
        } else {
            usleep(200000); // pause assez longue
        }

        printf("%s", MonAscii[i - 5]);
    }EffacerEcran();
}
